# -*- coding: utf-8 -*-
"""RecurrentNeuralNetworks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KiJtwWOZIRwnsRI17bjgOrTTUlgcFXAx
"""

from __future__ import unicode_literals, print_function, division
from io import open
import glob
import os

import unicodedata
import string

import torch
import torch.nn as nn

import matplotlib.pyplot as plt

import time
import math
import random

#Train a model to generate surnames
#start off with classifier: surname to nationality

def findFiles(path): return glob.glob(path)

files = findFiles('*.txt')
print(files)

all_letters = string.ascii_letters + ".,;'"
n_letters = len(all_letters)

#Turn a unicode string to plain ASCII
def unicodeToAscii(s):
    return ''.join(
        c for c in unicodedata.normalize('NFD', s)
        if unicodedata.category(c) != 'Mn'
        and c in all_letters
    )

print(unicodeToAscii(''))

#ascii numbers uniquely defines all roman text characters

#build the category_lines dictionary, a list of names per language
category_lines = {}
all_categories = []

#read a file and split into lines
def readLines(filename):
    lines = open(filename, encoding = 'utf-8').read().strip().split('\n')
    return [unicodeToAscii(line) for line in lines]

from google.colab import drive
drive.mount('/content/drive')

#Read file, store to dict
for filename in files:
    category = os.path.splitext(os.path.basename(filename))[0]
    all_categories.append(category)
    lines = readLines(filename)
    category_lines[category] = lines

n_categories = len(all_categories)

#find letter index from all_letters, e.g. "a" = 0
def letterToIndex(letter):
    return all_letters.find(letter)

#turn letter into 1x n_letters tensor
def letterToTensor(letter):
    tensor = torch.zeros(1, n_letters)
    tensor[0][letterToIndex(letter)] = 1
    return tensor

#turn line into a line_length x 1 x n_letter tensor
def lineToTensor(line):
    tensor = torch.zeros(len(line), 1, n_letters)
    for li, letter in enumerate(line):
        tensor[li][0][letterToIndex(letter)] = 1
    return tensor

class RNN(nn.Module):
    def __init__(self,input_size, hidden_size, output_size):
        super(RNN, self).__init__()

        self.hidden_size = hidden_size

        self.i2h = nn.Linear(input_size + hidden_size, hidden_size)
        self.i2o = nn.Linear(input_size + hidden_size, output_size)
        self.softmax = nn.LogSoftmax(dim = 1)

    def forward(self, input, hidden):
        #output -> map to category, calculates hidden for next time step
        combined = torch.cat((input,hidden) , 1)
        hidden = self.i2h(combined)
        output = self.i2o(combined)
        output = self.softmax(output)
        return output, hidden

    def initHidden(self):
        return torch.zeros(1, self.hidden_size)

n_hidden = 128
rnn = RNN(n_letters, n_hidden, n_categories)

#helper functions
def categoryFromOutput(output):
    top_n, top_i = output.topk(1)
    category_i = top_i[0].item()
    return all_categories[category_i], category_lines

def randomChoice(l):
    #random nationality
    return l[random.randint(0, len(l)-1)]

def randomTrainingExample():
    #random nationality + name
    category = randomChoice(all_categories)
    line = randomChoice(category_lines[category])
    category_tensor = torch.tensor([all_categories.index(category)], dtype = torch.long)
    line_tensor = lineToTensor(line)
    return category, line, category_tensor, line_tensor



#softmax converts matrix to prob matrix, then choose highest probability and
#output matrix with all 0s except 1 where the prob is highest

#RNN does it input by input, not all at once

criterion = nn.NLLLoss()

learning_rate = 0.005 

def train(category_tensor, line_tensor):
    hidden = rnn.initHidden() #for first run only

    rnn.zero_grad()

    for i in range(line_tensor.size()[0]):
      #goes through tensor and calculates output and hidden,
      #for each for loop step, the hidden value is updated based on previous input
        output, hidden = rnn(line_tensor[i], hidden)

    loss = criterion(output, category_tensor)
    loss.backward()

    #add parameters gradients to their values multiplied by learning rate

    for p in rnn.parameters():
        p.data -= learning_rate*p.grad.data
      
    return output, loss.item()

n_iters = 100000 # notice the much larger numbers than previously, as we are
#passing in individual training examples one at a time
print_every = 5000
plot_every = 1000

#keep track of losses for plotting
current_loss = 0
all_losses = []

def timeSince(since):
    now = time.time()
    s = now - since
    m = math.floor(s/60)
    s -= m * 60
    return '%dm %ds' % (m,s)

start = time.time()

for iter in range(1, n_iters + 1):
  #runs one training example at a time (as it is sequential)
    category, line, category_tensor, line_tensor = randomTrainingExample() #previously defined
    output, loss = train(category_tensor, line_tensor)
    current_loss +=loss

    #print iter number, loss, name and guess
    if iter % print_every ==0:
        guess, guess_i = categoryFromOutput(output)
        correct = 'correct' if guess == category else 'X (%s)' % category
        print('%d %d%% (%s) %.4f %s / %s %s' % (iter, iter/n_iters * 100, timeSince(start), loss ,line, guess,correct))
    
    if iter%plot_every ==0:
        all_losses.append(current_loss / plot_every)
        current_loss = 0

plt.figure()

plt.plot(all_losses, color = 'r', linestyle = '-', linewidth = 2)
plt.grid()
plt.show()

